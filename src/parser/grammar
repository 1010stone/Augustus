%class-name Parser
%filenames parser
%baseclass-preinclude ../../include/phylotree.hh
%scanner ../scanner/scanner.h           //includes Scanner class
%debug

/*
* the semantic value of a symbol is by default of type int.
* In order to have different types of semantic values for symbols,
* a union has to be declared
*/
%union{
 double dist;
 string *spec;
 Treenode* nodeptr;
}

/*
* tokens: terminal symbols, which the scanner returns, need to be in upper case letters
*/
%token <dist> DISTANCE
%token <spec> SPECIES
/*
* nonterminal symbols, need to be in lower case letters
*/
%type <nodeptr>   subtree branch branchset leaf tree
/*
* parser reduces token stream to a single start symbol, which tells the the parser, when
* parsing is finished. define the start symbol here:
*/
%start tree  

%%

/*
* grammar rules:
* for example, the first rule means: a tree is a subtree followed by a semicolon.
* If this is matched, the code followed in the braces {} is executed.
*/
tree:	
    subtree
    ';'
    {
	$$ = $1;
    }
;

subtree:
    leaf
    {	
	$$ = $1;
    }
|
    '('
    branchset
    ')'
    {	
	$$ = $2;
    }
;

leaf:
    SPECIES
    {
	Treenode *temp = new Treenode(*$1);
	ptree->treenodes.push_back(temp);
	ptree->leaves.push_back(temp);
	$$ = temp;
    }
;

branchset:
    branch
    {
	Treenode *temp = new Treenode;
	temp->addChild($1);
	$$ = temp;
    }
|
    branchset
    ','
    branch
    {
	$1->addChild($3);
	ptree->treenodes.push_back($1);
	$$ = $1;
    }
;

branch:
    subtree
    ':'
    DISTANCE
    {	
	$1->addDistance($3);
	$$=$1;
	
    }
;

